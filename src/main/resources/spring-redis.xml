<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd">
    <!-- 读取配置文件 -->
    <!--<context:property-placeholder location="classpath:*.properties"/>-->
    <!--设置数据池-->
    <bean id="poolConfig"  class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"></property>
        <property name="minIdle" value="${redis.minIdle}"></property>
        <property name="maxTotal" value="${redis.maxTotal}"></property>
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"></property>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"></property>
    </bean>
    <!--redis集群-->
    <!--<bean id="clusterRedisNodes1" class="org.springframework.data.redis.connection.RedisNode">
        <constructor-arg value="192.168.10.33" />
        <constructor-arg value="7000" type="int" />
    </bean>
    <bean id="clusterRedisNodes2" class="org.springframework.data.redis.connection.RedisNode">
        <constructor-arg value="192.168.10.61" />
        <constructor-arg value="7000" type="int" />
    </bean>
    <bean id="clusterRedisNodes3" class="org.springframework.data.redis.connection.RedisNode">
        <constructor-arg value="192.168.10.52" />
        <constructor-arg value="7000" type="int" />
    </bean>
    <bean id="clusterRedisNodes4" class="org.springframework.data.redis.connection.RedisNode">
        <constructor-arg value="192.168.10.53" />
        <constructor-arg value="7000" type="int" />
    </bean>
    <bean id="clusterRedisNodes5" class="org.springframework.data.redis.connection.RedisNode">
        <constructor-arg value="192.168.10.54" />
        <constructor-arg value="7000" type="int" />
    </bean>
    <bean id="clusterRedisNodes6" class="org.springframework.data.redis.connection.RedisNode">
        <constructor-arg value="192.168.10.57" />
        <constructor-arg value="7000" type="int" />
    </bean>
    <bean id="redisClusterConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <property name="clusterNodes">
            <set>
                <ref bean="clusterRedisNodes1" />
                <ref bean="clusterRedisNodes2" />
                <ref bean="clusterRedisNodes3" />
                <ref bean="clusterRedisNodes4" />
                <ref bean="clusterRedisNodes5" />
                <ref bean="clusterRedisNodes6" />
            </set>
        </property>
    </bean>-->
    <!--连接redis-->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"></property>
        <property name="port" value="${redis.port}"></property>
        <property name="password" value="${redis.password}"></property>
        <!--使用redis哪一个库-->
        <!--<property name="database" value="${redis.dbIndex}" />-->
        <property name="poolConfig" ref="poolConfig"></property>
        <!--把redis集群加入-->
       <!-- <constructor-arg ref="redisClusterConfiguration"/>-->
    </bean>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <!--以下针对各种数据进行序列化方式的选择-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>

        <!-- 开启REIDS事务支持 -->
       <!-- <property name="enableTransactionSupport" value="true"/>-->
    </bean>
    <!-- Redis缓存管理对象 -->
    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg  name="redisOperations" ref="redisTemplate" />
        <!--<property name="defaultExpiration" value="${redis.expiration}" />-->
    </bean>
    <!-- 使用中间类解决RedisCache.jedisConnectionFactory的静态注入，从而使MyBatis实现第三方缓存 -->
  <bean id="redisCacheConfig" class="com.ssm.utils.shiroUtile.RedisCacheConfig">
        <constructor-arg ref="jedisConnectionFactory" />
        <constructor-arg ref="redisTemplate" />
        <constructor-arg ref="redisCacheManager" />
    </bean>
    <!--sesion设置-->
    <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <property name="maxInactiveIntervalInSeconds" value="3600"></property>
    </bean>
</beans>